"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from configparser import ConfigParser
from pathlib import Path
from corsheaders.defaults import default_headers
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env
load_dotenv()

# Use environment variables
protocol = os.getenv('PROTOCOL')
url = os.getenv('URL')
react_port = os.getenv('REACT_PORT')
django_port = os.getenv('DJANGO_PORT')
redis_port = os.getenv('REDIS_PORT')
localhost = '127.0.0.1'

BACKEND_URL = f'{protocol}://{url}:{django_port}'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-=tipn%0ut^gk7i-oo1lbv$16zyb!8oe48r$5(xx-m5^mt4e!z%'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# ALLOWED_HOSTS, CORS, and other parts of your settings.py remain the same,
# just replace hardcoded values with variables from config.
ALLOWED_HOSTS = [url, 'localhost', '192.168.1.9', '127.0.0.1', 'picotrip.com', 'www.picotrip.com']

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'backend',
    'corsheaders'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# TO-DO: set this to false when host on internet
CORS_ALLOW_ALL_ORIGINS = True  # Use with caution, and it's better to specify allowed origins instead
CORS_ALLOW_ALL_HEADERS = True
CORS_ALLOW_METHODS = ["DELETE", "GET", "OPTIONS", "PATCH", "POST", "PUT"]

CORS_ORIGIN_WHITELIST = [
    f'{protocol}://{url}:{react_port}',  # example for local development
    f'{protocol}://localhost:{react_port}'
]

CORS_ALLOWED_ORIGINS = [
    f'{protocol}://{localhost}:{react_port}',
    f'{protocol}://{url}:{react_port}',
    f'{protocol}://picotrip.com',
    f'https://picotrip.com',
    f'https://www.picotrip.com',
    f'http://127.0.0.1:3000'
]

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = list(default_headers) + [
    'sessionid',
    'cache-control',  # Add this
]

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'main/templates/static')]

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = "create"
LOGOUT_REDIRECT_URL = "home"

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",
    },
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{asctime} {levelname} [{name}] {message}',
            'style': '{',  # This allows using {format} style
            'datefmt': '%Y-%m-%d %H:%M:%S',  # Format for the timestamp
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',  # Use the formatter with timestamp
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'django_debug.log',  # Log file location
            'formatter': 'verbose',  # Use the formatter with timestamp
        },
    },
    'loggers': {
        'root': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
        },
    },
}

# Use Redis as the session storage backend
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f'redis://{localhost}:{redis_port}/1',  # Update with your Redis configuration
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}

CELERY_BROKER_URL = f'redis://{localhost}:{redis_port}/0'
CELERY_RESULT_BACKEND = f'redis://{localhost}:{redis_port}/0'

# Set SESSION_COOKIE_SAMESITE and SESSION_COOKIE_SECURE based on the environment
if protocol == 'http':
    SESSION_COOKIE_SAMESITE = 'Lax'  # More permissive for local development
    SESSION_COOKIE_SECURE = False  # Allow cookies over HTTP for local dev
else:
    SESSION_COOKIE_SAMESITE = 'None'  # Required for cross-origin cookies
    SESSION_COOKIE_SECURE = True  # Enforce HTTPS for production
    CSRF_COOKIE_SAMESITE = 'None'
    CSRF_COOKIE_SECURE = True
